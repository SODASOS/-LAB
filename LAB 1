using System;

namespace FractionCalculator
{
    public class NotCorrectlyDenominatorException : ArgumentException
    {
        public NotCorrectlyDenominatorException(string message) : base(message) { }
    }

    public class Fraction
    {
        private int numerator;
        private int denominator;

        public int Numerator
        {
            get { return numerator; }
            set { numerator = value; Simplify(); }
        }

        public int Denominator
        {
            get { return denominator; }
            set
            {
                if (value == 0)
                {
                    throw new NotCorrectlyDenominatorException("Знаменатель не может быть равен 0");
                }
                denominator = value;
                Simplify();
            }
        }

        public double DecimalValue => (double)Numerator / Denominator; // Свойство только для чтения

        public Fraction(int numerator, int denominator)
        {
            if (denominator == 0)
            {
                throw new NotCorrectlyDenominatorException("Знаменатель не может быть равен 0");
            }

            this.numerator = numerator;
            this.denominator = denominator;
            Simplify();
        }

        private static int GCD(int a, int b)
        {
            while (b != 0)
            {
                int temp = b;
                b = a % b;
                a = temp;
            }
            return Math.Abs(a);
        }

        private void Simplify()
        {
            int gcd = GCD(numerator, denominator);
            numerator /= gcd;
            denominator /= gcd;

            if (denominator < 0)
            {
                numerator = -numerator;
                denominator = -denominator;
            }
        }

        public static Fraction operator +(Fraction a, Fraction b)
        {
            return new Fraction(a.Numerator * b.Denominator + b.Numerator * a.Denominator, a.Denominator * b.Denominator);
        }

        public static Fraction operator -(Fraction a, Fraction b)
        {
            return new Fraction(a.Numerator * b.Denominator - b.Numerator * a.Denominator, a.Denominator * b.Denominator);
        }

        public static Fraction operator *(Fraction a, Fraction b)
        {
            return new Fraction(a.Numerator * b.Numerator, a.Denominator * b.Denominator);
        }

        public static Fraction operator /(Fraction a, Fraction b)
        {
            if (b.Numerator == 0)
            {
                throw new DivideByZeroException("Деление на 0!");
            }
            return new Fraction(a.Numerator * b.Denominator, a.Denominator * b.Numerator);
        }


        public override string ToString()
        {
            return $"{Numerator}/{Denominator}";
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            try
            {
                Fraction f1 = new Fraction(1, 2);
                Fraction f2 = new Fraction(1, 4);

                Console.WriteLine($"{f1} + {f2} = {f1 + f2}");
                Console.WriteLine($"{f1} - {f2} = {f1 - f2}");
                Console.WriteLine($"{f1} * {f2} = {f1 * f2}");
                Console.WriteLine($"{f1} / {f2} = {f1 / f2}");

                Console.WriteLine($"{f1} в десятичном виде: {f1.DecimalValue}");

                Fraction f3 = new Fraction(2, 4);
                Console.WriteLine($"Дробь {f3} упрощена: {f3}"); //Демонстрация упрощения

                //  Fraction f4 = new Fraction(1, 0); // Выбросит исключение

            }
            catch (NotCorrectlyDenominatorException ex)
            {
                Console.WriteLine($"Ошибка знаменателя: {ex.Message}");
            }
            catch (DivideByZeroException ex)
            {
                Console.WriteLine($"Ошибка деления: {ex.Message}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Произошла ошибка: {ex.Message}");
            }

            Console.ReadKey();
        }
    }
}
