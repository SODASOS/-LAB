using System;

public class Program
{
    public static void Main(string[] args)
    {
        // Задание1 Демонстрация класса дробей 
        Console.WriteLine("Задание 1: Демонстрация класса дробей");
        Fraction f1 = new Fraction(1, 2);
        Fraction f2 = new Fraction(1, 4);

        Console.WriteLine($"{f1} + {f2} = {f1 + f2}");
        Console.WriteLine($"{f1} - {f2} = {f1 - f2}");
        Console.WriteLine($"{f1} * {f2} = {f1 * f2}");
        Console.WriteLine($"{f1} / {f2} = {f1 / f2}");


        // Задание 2 Демонстрация свойств и (частично) Задание 3 и 4 теперь в Fraction.Main

        // Задание 5 и 6 я продемонстрирую при создании новых объектов Fraction.

    }
}

// Задание 6*: Собственный класс исключения
public class NotCorrectlyDenominatorException : ArgumentException
{
    public NotCorrectlyDenominatorException(string message) : base(message) { }
}

public class Fraction
{
    private int numerator;
    private int denominator;

    // Задание 1: Конструктор (и расширяется в следующих заданиях)
    public Fraction(int numerator, int denominator)
    {
        // Задание 4 и 6*: Проверка знаменателя
        if (denominator == 0)
        {
            throw new NotCorrectlyDenominatorException("Знаменатель не может быть равен 0");
        }

        this.numerator = numerator;
        this.denominator = denominator;

        // Задание 5: Упрощение дроби при создании
        Simplify();
    }

    // Задание 2: Свойства для доступа к числителю и знаменателю
    public int Numerator
    {
        get { return numerator; }
        set { numerator = value; Simplify(); } // Упрощаем при изменении числителя
    }

    public int Denominator
    {
        get { return denominator; }
        set
        {
            if (value == 0)
            {
                throw new NotCorrectlyDenominatorException("Знаменатель не может быть равен 0");
            }
            denominator = value;
            Simplify(); // Упрощаем при изменении знаменателя
        }
    }

    // Задание 3: Свойство только для чтения для получения десятичной дроби
    public double DecimalValue
    {
        get { return (double)numerator / denominator; }
    }

    // Задание 5: Упрощение дроби (метод)
    private void Simplify()
    {
        int gcd = GreatestCommonDivisor(numerator, denominator);
        numerator /= gcd;
        denominator /= gcd;

        // Чтобы знак минус всегда был у числителя.
        if (denominator < 0)
        {
            numerator = -numerator;
            denominator = -denominator;
        }
    }


    // Вспомогательный метод для нахождения НОД (наибольшего общего делителя)
    private int GreatestCommonDivisor(int a, int b)
    {
        a = Math.Abs(a);
        b = Math.Abs(b);

        while (b != 0)
        {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }

    // Задание 1: Переопределение ToString() для красивого вывода
    public override string ToString()
    {
        return $"{numerator}/{denominator}";
    }

    // Задание 1: Методы сложения, вычитания, умножения и деления (переопределенные операторы)
    public static Fraction operator +(Fraction a, Fraction b)
    {
        return new Fraction(a.numerator * b.denominator + b.numerator * a.denominator, a.denominator * b.denominator);
    }

    public static Fraction operator -(Fraction a, Fraction b)
    {
        return new Fraction(a.numerator * b.denominator - b.numerator * a.denominator, a.denominator * b.denominator);
    }

    public static Fraction operator *(Fraction a, Fraction b)
    {
        return new Fraction(a.numerator * b.numerator, a.denominator * b.denominator);
    }

    public static Fraction operator /(Fraction a, Fraction b)
    {
        if (b.numerator == 0)
        {
            throw new DivideByZeroException("Деление на ноль!");
        }
        return new Fraction(a.numerator * b.denominator, a.denominator * b.numerator);
    }
}
